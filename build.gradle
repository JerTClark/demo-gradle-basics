import util.ProjectVersion
import util.ReleaseVersionListener
import util.ReleaseVersionTask

apply plugin: 'groovy'
group = 'buildbasics'
setDescription "$name is a simple project for learning Gradle build basics."

repositories {
    mavenCentral()
}

dependencies {

}

gradle.taskGraph.whenReady {
    if (gradle.taskGraph.hasTask(':release')) {
        if (!version.release) {
            version.release = true
            ant.propertyfile(file: versionFile) {
                entry(key: 'release', type: 'string', operation: '=', value: 'true')
            }
        }
    }
}

def releaseVersionListener = new ReleaseVersionListener()
gradle.taskGraph.addTaskExecutionGraphListener(releaseVersionListener)

/**
 * file method provided by Project interface
 * creates an instance of java.io.File relative to project directory
 */
ext.versionFile = file('version.properties')

/**
 * task configuration is declared <b>without a left shift or other action</b>
 */
task loadVersion {
    project.version = readVersion()
}

ProjectVersion readVersion() {
    logger.quiet "Reading the version file"
    if (!versionFile.exists()) {
        throw new GradleException("Required version file does not exist:" +
                "${versionFile.canonicalPath}")
    }
    Properties versionProps = new Properties()
    /**
     * Groovy's file implementation allows read with
     * newly created input stream
     */
    versionFile.withInputStream { stream ->
        versionProps.load(stream)
    }
    new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger(),
            versionProps.release.toBoolean());
}

task printVersion << { println "$version" }

task makeReleaseVersion(group: "versioning",
        description: "Makes project a release version") {
    /**
     * Inputs/outputs are declared during the configuration phase
     */
    inputs.property('release', version.release)//the input
    outputs.file versionFile//will be modified, so it's an output

    doLast {
        version.release = true
        /**
         * Ant task provides a convenient way to modify the property file
         */
        ant.propertyfile(file: versionFile) {
            entry(key: "release", type: "string", operation: "=", value: "true")
        }
    }
}

task makeReleaseVersionCustom(type: ReleaseVersionTask) {
    release = version.release
    destFile = versionFile
}

//Task Rules section
/**
 * We are aiming to replace the following two similar tasks with a task rule
 */
task incrementMajorVersion(group: "versioning",
        description: "Increments project major version") << {
    String currentVersion = version.toString()
    ++version.major
    String newVersion = version.toString()
    ant.propertyfile(file: versionFile) {
        entry(key: 'major', type: 'int', operation: '+', value: 1)
    }
}

task incrementMinorVersion(group: "versioning",
        description: "Increments project minor version") << {
    String currentVersion = version.toString()
    ++version.minor
    String newVersion = version.toString()
    ant.propertyfile(file: versionFile) {
        entry(key: 'minor', type: 'int', operation: '+', value: 1)
    }
}

tasks.addRule("Pattern: increment<Classifier>Version - Increments the project version classifier") {
    String taskName ->
        if (taskName.startsWith('increment') && taskName.endsWith('Version')) {
            String classifier = (taskName - 'increment' - 'Version').toLowerCase()
            String currentVersion = version.toString()
            switch (classifier) {
                case "major":
                    ++version.major
                    break;
                case "minor":
                    ++version.minor
                    break;
                default:
                    throw new GradleException("Invalid version type: $classifier. Allowed types: ['Major', 'Minor'].")
            }
            String newVersion = version.toString()
            logger.info "Incrementing $classifier project version: $currentVersion -> $newVersion"
            ant.propertyfile(file: versionFile) {
                entry(key: classifier, type: 'int', operation: '+', value: 1)
            }
        }
}